demo()
recursion
dome(recoursion)
demo(recursion)
?pdisc
library(LearnBayes)
?pdisc
library(LearnBayes)
p=(0:8)/8
prior=c(1,1,950,8,8,8,8,8,8)/1000
data=c(6,4)
post=pdisc(p,prior,data)
round
brary(ggplot2)
pr = data.frame("Prior", p, prior)
po = data.frame("Posterior", p, post)
names(pr) = c("Type", "P", "Probability")
names(po) = c("Type", "P", "Probability")
data = rbind(pr, po)
qplot(data
qplot(data = data, x = P, y = Probability, geom = "col") + facet_grid(Type~.) + theme_bw()
qplot(data = data, x = P, y = Probability, geom = "col") + facet_grid(Type~.) + theme_bw()
library(ggplot2)
pr = data.frame("Prior", p, prior)
po = data.frame("Posterior", p, post)
names(pr) = c("Type", "P", "Probability")
names(po) = c("Type", "P", "Probability")
data = rbind(pr, po)
qplot(data = data, x = P, y = Probability, geom = "col") + facet_grid(Type~.) + theme_bw()
p=(0:8)/8
prior=c(1,1,950,8,8,8,8,8,8)/1000
data=c(60,40)
post=pdisc(p,prior,data)
round(cbind(p, prior, post),3)
library(ggplot2)
pr = data.frame("Prior", p, prior)
po = data.frame("Posterior", p, post)
names(pr) = c("Type", "P", "Probability")
names(po) = c("Type", "P", "Probability")
data = rbind(pr, po)
qplot(data = data, x = P, y = Probability, geom = "col") + facet_grid(Type~.) + theme_bw()
#prior=c(1,1,950,8,8,8,8,8,8)/1000
prior=rep(1/9, 9)
data=c(6,4)
post=pdisc(p,prior,data)
round(cbind(p, prior, post),3)
library(ggplot2)
pr = data.frame("Prior", p, prior)
po = data.frame("Posterior", p, post)
names(pr) = c("Type", "P", "Probability")
names(po) = c("Type", "P", "Probability")
data = rbind(pr, po)
qplot(data = data, x = P, y = Probability, geom = "col") + facet_grid(Type~.) + theme_bw()
p=(0:8)/8
prior=c(1,1,950,8,8,8,8,8,8)/1000
data=c(6,4)
post=pdisc(p,prior,data)
round(cbind(p, prior, post),3)
library(ggplot2)
pr = data.frame("Prior", p, prior)
po = data.frame("Posterior", p, post)
names(pr) = c("Type", "P", "Probability")
names(po) = c("Type", "P", "Probability")
data = rbind(pr, po)
qplot(data = data, x = P, y = Probability, geom = "col") + facet_grid(Type~.) + theme_bw()
qbeta
?qbeta
a=23; b=8
s = seq(0,1,length.out = 1000)
qplot(x = s, y = dbeta(s, a, b), geom = "line", xlab = "theta", ylab = "Beta(a, b)")
qplot(x = s, y = dbeta(s, 1, 1), geom = "line", xlab = "theta", ylab = "Beta(a, b)") + geom_vline(aes(xintercept = interval.est), col = "red")
qplot(x = s, y = dbeta(s, 1, 1), geom = "line", xlab = "theta", ylab = "Beta(a, b)")
interval.est=qbeta(c(.05,.95),a,b)
interval.est
qplot(x = s, y = dbeta(s, a, b), geom = "line", xlab = "theta", ylab = "Beta(a, b)") + geom_vline(aes(xintercept = interval.est), col = "red")
prob=1-pbeta(.6,a,b)
prob
qplot(x = s, y = dbeta(s, a, b), geom = "line", xlab = "theta", ylab = "Beta(a, b)") + geom_vline(xintercept = .6, col= "red")
sim.p=rbeta(1000,a,b)
qplot(x = sim.p, geom= "histogram", bins = 30) + coord_cartesian(xlim = c(0,1))
qplot(x = sim.p, y = ..density.., geom= "histogram", bins = 30) + geom_line(aes(x = s, y = dbeta(s, a, b)), col = "red")
sim.y=rbinom(1000,10,sim.p)
qplot(sim.y, geom = "bar") + coord_cartesian(xlim = c(0, 10)) + scale_x_continuous(breaks = 0:10, labels=as.character(0:10)) + ggtitle("Predicted # of grads")
?rbinom
getwd()
#  To use the BernBeta function, we have to source it.
setwd("~/../Dev/stat444/lab2")
source("BernBeta.R")
setwd("~/../Dev/stat444/lab2")
source("HDIofICDF.R")
#  To use the BernBeta function, we have to source it.
setwd("~/../Dev/stat444/lab2")
source("BernBeta.R")
#  Beta(1,1) prior and 11 out of 14 successes
priorShape = c(1,1)
dataVec = c(1,1,1,1,1,1,1,1,1,1,1,0,0,0)
credMass = 0.95
postShape = BernBeta(priorShape, dataVec, credMass)
# Different prior
priorShape = c(100,100)
postShape = BernBeta(priorShape, dataVec, credMass)
#  Half successes
priorShape = c(1,1)
dataVec = c(1,1,1,1,1,1,1,0,0,0,0,0,0,0)
credMass = 0.95
postShape = BernBeta(priorShape, dataVec, credMass)
#  Different prior
priorShape = c(100,100)
postShape = BernBeta(priorShape, dataVec, credMass)
postShape = BernBeta(priorShape, dataVec, credMass)
#  Half successes
priorShape = c(1,1)
dataVec = c(1,1,1,1,1,1,1,0,0,0,0,0,0,0)
credMass = 0.95
postShape = BernBeta(priorShape, dataVec, credMass)
#  Different prior
priorShape = c(100,100)
postShape = BernBeta(priorShape, dataVec, credMass)
#  Beta(1,1) prior and 11 out of 14 successes
priorShape = c(1,1)
dataVec = c(1,1,1,1,1,1,1,1,1,1,1,0,0,0)
credMass = 0.95
postShape = BernBeta(priorShape, dataVec, credMass)
# Different prior
priorShape = c(200,200)
postShape = BernBeta(priorShape, dataVec, credMass)
#dataVec = c(1,1,1,1,1,1,1,1,1,1,1,0,0,0)
dataVec = sample(c(1,0), 200, replace=True, prob=c(11/14, 3/14))
credMass = 0.95
postShape = BernBeta(priorShape, dataVec, credMass)
#dataVec = c(1,1,1,1,1,1,1,1,1,1,1,0,0,0)
dataVec = sample(c(1,0), 200, replace=TRUE, prob=c(11/14, 3/14))
credMass = 0.95
postShape = BernBeta(priorShape, dataVec, credMass)
# Different prior
priorShape = c(100,100)
postShape = BernBeta(priorShape, dataVec, credMass)
